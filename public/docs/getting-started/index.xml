<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>– Getting Started</title><link>http://localhost:1313/docs/getting-started/</link><description>Recent content in Getting Started on</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Thu, 05 Jan 2017 00:00:00 +0000</lastBuildDate><atom:link href="http://localhost:1313/docs/getting-started/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Quickstart: Create a Game Server</title><link>http://localhost:1313/docs/getting-started/create-gameserver/</link><pubDate>Wed, 02 Jan 2019 06:35:31 +0000</pubDate><guid>http://localhost:1313/docs/getting-started/create-gameserver/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The following prerequisites are required to create a GameServer:&lt;/p>
&lt;ol>
&lt;li>A Kubernetes cluster with the UDP port range 7000-8000 open on each node.&lt;/li>
&lt;li>Code Blind controller installed in the targeted cluster&lt;/li>
&lt;li>kubectl properly configured&lt;/li>
&lt;li>Netcat which is already installed on most Linux/macOS distributions, for windows you can use &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">WSL&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>If you don’t have a Kubernetes cluster you can follow &lt;a href="http://localhost:1313/docs/installation/">these instructions&lt;/a> to create a cluster on Google Kubernetes Engine (GKE), Minikube or Azure Kubernetes Service (AKS), and install Code Blind.&lt;/p>
&lt;p>For the purpose of this guide we’re going to use the
&lt;a href="https://github.com/josephbarnett/codeblind.ai/blob/release-1.38.0/examples/simple-game-server/" target="_blank" data-proofer-ignore>simple-game-server&lt;/a>
example as the GameServer container. This example is a very simple UDP server written in Go. Don’t hesitate to look at the code of this example for more information.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;/h2>
&lt;ul>
&lt;li>Create a GameServer in Kubernetes using Code Blind custom resource.&lt;/li>
&lt;li>Get information about the GameServer such as IP address, port and state.&lt;/li>
&lt;li>Connect to the GameServer.&lt;/li>
&lt;/ul>
&lt;h3 id="1-create-a-gameserver">1. Create a GameServer&lt;/h3>
&lt;p>Let&amp;rsquo;s create a GameServer using the following command :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserver.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see a successful output similar to this :&lt;/p>
&lt;pre tabindex="0">&lt;code>gameserver.agones.dev/simple-game-server-4ss4j created
&lt;/code>&lt;/pre>&lt;p>This has created a GameServer record inside Kubernetes, which has also created a backing &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/">Pod&lt;/a> to run our simple udp game server code in.
If you want to see all your running GameServers you can run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gameservers
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-7pjrq Ready 35.233.183.43 7190 agones 3m
&lt;/code>&lt;/pre>&lt;p>You can also see the &lt;a href="https://kubernetes.io/docs/concepts/workloads/pods/pod/">Pod&lt;/a> that got created by running &lt;code>kubectl get pods&lt;/code>, the Pod will be prefixed by &lt;code>simple-game-server&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME READY STATUS RESTARTS AGE
simple-game-server-7pjrq 2/2 Running 0 5m
&lt;/code>&lt;/pre>&lt;p>As you can see above it says &lt;code>READY: 2/2&lt;/code> this means there are two containers running in this Pod, this is because Code Blind injected the &lt;a href="https://agones.dev/docs/guides/troubleshooting/#how-do-i-see-the-logs-for-agones">SDK sidecar&lt;/a> for readiness
and health checking of your Game Server.&lt;/p>
&lt;p>For the full details of the YAML file head to the &lt;a href="http://localhost:1313/docs/reference/gameserver/">GameServer Specification Guide&lt;/a>&lt;/p>
&lt;h3 id="2-fetch-the-gameserver-status">2. Fetch the GameServer Status&lt;/h3>
&lt;p>Let&amp;rsquo;s wait for the GameServer state to become &lt;code>Ready&lt;/code>. You can use the &lt;code>watch&lt;/code>
tool to see the state change. If your operating system does not have &lt;code>watch&lt;/code>,
manually run &lt;code>kubectl describe gameserver&lt;/code> until the state changes.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>watch kubectl describe gameserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Name: simple-game-server-7pjrq
Namespace: default
Labels: &amp;lt;none&amp;gt;
Annotations: agones.dev/sdk-version: 0.9.0-764fa53
API Version: agones.dev/v1
Kind: GameServer
Metadata:
Creation Timestamp: 2019-02-27T15:06:20Z
Finalizers:
agones.dev
Generate Name: simple-game-server-
Generation: 1
Resource Version: 30377
Self Link: /apis/agones.dev/v1/namespaces/default/gameservers/simple-game-server-7pjrq
UID: 3d7ac3e1-3aa1-11e9-a4f5-42010a8a0019
Spec:
Container: simple-game-server
Health:
Failure Threshold: 3
Initial Delay Seconds: 5
Period Seconds: 5
Ports:
Container Port: 7654
Host Port: 7190
Name: default
Port Policy: Dynamic
Protocol: UDP
Scheduling: Packed
Template:
Metadata:
Creation Timestamp: &amp;lt;nil&amp;gt;
Spec:
Containers:
Image: us-docker.pkg.dev/codeblind/examples/simple-server:0.27
Name: simple-game-server
Resources:
Limits:
Cpu: 20m
Memory: 32Mi
Requests:
Cpu: 20m
Memory: 32Mi
Status:
Address: 35.233.183.43
Node Name: agones
Ports:
Name: default
Port: 7190
State: Ready
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal PortAllocation 34s gameserver-controller Port allocated
Normal Creating 34s gameserver-controller Pod simple-game-server-7pjrq created
Normal Scheduled 34s gameserver-controller Address and port populated
Normal Ready 27s gameserver-controller SDK.Ready() executed
&lt;/code>&lt;/pre>&lt;p>If you look towards the bottom, you can see there is a &lt;code>Status &amp;gt; State&lt;/code> value. We are waiting for it to move to &lt;code>Ready&lt;/code>, which means that the game server is ready to accept connections.&lt;/p>
&lt;p>You might also be interested to see the &lt;code>Events&lt;/code> section, which outlines when various lifecycle events of the &lt;code>GameServer&lt;/code> occur. We can also see when the &lt;code>GameServer&lt;/code> is ready on the event stream as well - at which time the &lt;code>Status &amp;gt; Address&lt;/code> and &lt;code>Status &amp;gt; Ports &amp;gt; Port&lt;/code> have also been populated, letting us know what IP and port our client can now connect to!&lt;/p>
&lt;p>Let&amp;rsquo;s retrieve the IP address and the allocated port of your Game Server :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should output your Game Server IP address and ports, eg:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-7pjrq Ready 35.233.183.43 7190 agones 4m
&lt;/code>&lt;/pre>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If you have Code Blind installed on minikube, or other local Kubernetes tooling, and you are having issues connecting
to the &lt;code>GameServer&lt;/code>, please check the
&lt;a href="http://localhost:1313/docs/installation/creating-cluster/minikube/#local-connection-workarounds">Minikube local connection workarounds&lt;/a>.
&lt;/div>
&lt;h3 id="3-connect-to-the-gameserver">3. Connect to the GameServer&lt;/h3>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If you have Code Blind installed on Google Kubernetes Engine, and are using
Cloud Shell for your terminal, UDP is blocked. For this step, we recommend
SSH&amp;rsquo;ing into a running VM in your project, such as a Kubernetes node.
You can click the &amp;lsquo;SSH&amp;rsquo; button on the &lt;a href="https://console.cloud.google.com/compute/instances">Google Compute Engine Instances&lt;/a>
page to do this.
Run &lt;code>toolbox&lt;/code> on GKE Node to run docker container with tools and then &lt;code>nc&lt;/code> command would be available.
&lt;/div>
&lt;p>You can now communicate with the Game Server :&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>If you do not have netcat installed
(i.e. you get a response of &lt;code>nc: command not found&lt;/code>),
you can install netcat by running &lt;code>sudo apt install netcat&lt;/code>.&lt;/p>
&lt;p>If you are on Windows, you can alternatively install netcat on
&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">WSL&lt;/a>,
or download a version of netcat for Windows from &lt;a href="https://nmap.org/ncat/">nmap.org&lt;/a>.&lt;/p>
&lt;/div>
&lt;pre tabindex="0">&lt;code>nc -u {IP} {PORT}
Hello World !
ACK: Hello World !
EXIT
&lt;/code>&lt;/pre>&lt;p>You can finally type &lt;code>EXIT&lt;/code> which tells the SDK to run the &lt;a href="http://localhost:1313/docs/guides/client-sdks/#shutdown">Shutdown command&lt;/a>, and therefore shuts down the &lt;code>GameServer&lt;/code>.&lt;/p>
&lt;p>If you run &lt;code>kubectl describe gameserver&lt;/code> again - either the GameServer will be gone completely, or it will be in &lt;code>Shutdown&lt;/code> state, on the way to being deleted.&lt;/p>
&lt;h2 id="next-step">Next Step&lt;/h2>
&lt;p>If you want to use your own GameServer container make sure you have properly integrated the &lt;a href="http://localhost:1313/docs/guides/client-sdks/">Code Blind SDK&lt;/a>.&lt;/p></description></item><item><title>Docs: Quickstart: Create a Game Server Fleet</title><link>http://localhost:1313/docs/getting-started/create-fleet/</link><pubDate>Wed, 02 Jan 2019 06:42:20 +0000</pubDate><guid>http://localhost:1313/docs/getting-started/create-fleet/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>The following prerequisites are required to create a GameServer:&lt;/p>
&lt;ol>
&lt;li>A Kubernetes cluster with the UDP port range 7000-8000 open on each node.&lt;/li>
&lt;li>Code Blind controller installed in the targeted cluster&lt;/li>
&lt;li>kubectl properly configured&lt;/li>
&lt;li>Netcat which is already installed on most Linux/macOS distributions, for windows you can use &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">WSL&lt;/a>.&lt;/li>
&lt;/ol>
&lt;p>If you don’t have a Kubernetes cluster you can follow &lt;a href="http://localhost:1313/docs/installation/">these instructions&lt;/a> to create a cluster on Google Kubernetes Engine (GKE), Minikube or Azure Kubernetes Service (AKS), and install Code Blind.&lt;/p>
&lt;p>For the purpose of this guide we’re going to use the
&lt;a href="https://github.com/josephbarnett/codeblind.ai/blob/release-1.38.0/examples/simple-game-server/" target="_blank" data-proofer-ignore>simple-game-server&lt;/a>
example as the GameServer container. This example is a very simple UDP server written in Go. Don’t hesitate to look at the code of this example for more information.&lt;/p>
&lt;p>While not required, you may wish to go through the &lt;a href="http://localhost:1313/docs/getting-started/create-gameserver/">Create a Game Server&lt;/a> quickstart before this one.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;/h2>
&lt;ul>
&lt;li>Create a &lt;a href="https://agones.dev/docs/reference/fleet/">Fleet&lt;/a> in Kubernetes using an Code Blind custom resource.&lt;/li>
&lt;li>Scale the Fleet up from its initial configuration.&lt;/li>
&lt;li>Request a GameServer allocation from the Fleet to play on.&lt;/li>
&lt;li>Connect to the allocated GameServer.&lt;/li>
&lt;li>Deploy a new GameServer configuration to the Fleet.&lt;/li>
&lt;/ul>
&lt;h3 id="1-create-a-fleet">1. Create a Fleet&lt;/h3>
&lt;p>Let&amp;rsquo;s create a Fleet using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/fleet.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see a successful output similar to this :&lt;/p>
&lt;pre tabindex="0">&lt;code>fleet.agones.dev/simple-game-server created
&lt;/code>&lt;/pre>&lt;p>This has created a Fleet record inside Kubernetes, which in turn creates two warm &lt;a href="http://localhost:1313/docs/reference/gameserver/">GameServers&lt;/a>
that are available to be allocated for a game session.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get fleet
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME SCHEDULING DESIRED CURRENT ALLOCATED READY AGE
simple-game-server Packed 2 3 0 2 9m
&lt;/code>&lt;/pre>&lt;p>You can also see the GameServers that have been created by the Fleet by running &lt;code>kubectl get gameservers&lt;/code>,
the GameServer will be prefixed by &lt;code>simple-game-server&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-llg4x-rx6rc Ready 192.168.122.205 7752 minikube 9m
simple-game-server-llg4x-v6g2r Ready 192.168.122.205 7623 minikube 9m
&lt;/code>&lt;/pre>&lt;p>For the full details of the YAML file head to the &lt;a href="http://localhost:1313/docs/reference/fleet/">Fleet Specification Guide&lt;/a>&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
The game servers deployed from a &lt;code>Fleet&lt;/code> resource will be deployed in the same namespace. The above example omits specifying a namespace, which implies both the &lt;code>Fleet&lt;/code> and the associated &lt;code>GameServer&lt;/code> resources will be deployed to the &lt;code>default&lt;/code> namespace.
&lt;/div>
&lt;h3 id="2-fetch-the-fleet-status">2. Fetch the Fleet status&lt;/h3>
&lt;p>Let&amp;rsquo;s wait for the two &lt;code>GameServers&lt;/code> to become ready.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>watch kubectl describe fleet simple-game-server
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Name: simple-game-server
Namespace: default
Labels: &amp;lt;none&amp;gt;
Annotations: kubectl.kubernetes.io/last-applied-configuration={&amp;#34;apiVersion&amp;#34;:&amp;#34;agones.dev/v1&amp;#34;,&amp;#34;kind&amp;#34;:&amp;#34;Fleet&amp;#34;,&amp;#34;metadata&amp;#34;:{&amp;#34;annotations&amp;#34;:{},&amp;#34;name&amp;#34;:&amp;#34;simple-game-server&amp;#34;,&amp;#34;namespace&amp;#34;:&amp;#34;default&amp;#34;},&amp;#34;spec&amp;#34;:{&amp;#34;replicas&amp;#34;:2,...
API Version: agones.dev/v1
Kind: Fleet
Metadata:
Cluster Name:
Creation Timestamp: 2018-07-01T18:55:35Z
Generation: 1
Resource Version: 24685
Self Link: /apis/agones.dev/v1/namespaces/default/fleets/simple-game-server
UID: 56710a91-7d60-11e8-b2dd-08002703ef08
Spec:
Replicas: 2
Strategy:
Rolling Update:
Max Surge: 25%
Max Unavailable: 25%
Type: RollingUpdate
Template:
Metadata:
Creation Timestamp: &amp;lt;nil&amp;gt;
Spec:
Health:
Ports:
Container Port: 7654
Name: default
Port Policy: Dynamic
Template:
Metadata:
Creation Timestamp: &amp;lt;nil&amp;gt;
Spec:
Containers:
Image: us-docker.pkg.dev/codeblind/examples/simple-server:0.27
Name: simple-game-server
Resources:
Status:
Allocated Replicas: 0
Ready Replicas: 2
Replicas: 2
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal CreatingGameServerSet 13s fleet-controller Created GameServerSet simple-game-server-wlqnd
&lt;/code>&lt;/pre>&lt;p>If you look towards the bottom, you can see there is a section of &lt;code>Status &amp;gt; Ready Replicas&lt;/code> which will tell you
how many &lt;code>GameServers&lt;/code> are currently in a Ready state. After a short period, there should be 2 &lt;code>Ready Replicas&lt;/code>.&lt;/p>
&lt;h3 id="3-scale-up-the-fleet">3. Scale up the Fleet&lt;/h3>
&lt;p>Let&amp;rsquo;s scale up the &lt;code>Fleet&lt;/code> from 2 &lt;code>replicates&lt;/code> to 5.&lt;/p>
&lt;p>Run &lt;code>kubectl scale fleet simple-game-server --replicas=5&lt;/code> to change Replicas count from 2 to 5.&lt;/p>
&lt;p>If we now run &lt;code>kubectl get gameservers&lt;/code> we should see 5 &lt;code>GameServers&lt;/code> prefixed by &lt;code>simple-game-server&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-sdhzn-kcmh6 Ready 192.168.122.205 7191 minikube 52m
simple-game-server-sdhzn-pdpk5 Ready 192.168.122.205 7752 minikube 53m
simple-game-server-sdhzn-r4d6x Ready 192.168.122.205 7623 minikube 52m
simple-game-server-sdhzn-wng5k Ready 192.168.122.205 7709 minikube 53m
simple-game-server-sdhzn-wnhsw Ready 192.168.122.205 7478 minikube 52m
&lt;/code>&lt;/pre>&lt;h3 id="4-allocate-a-game-server-from-the-fleet">4. Allocate a Game Server from the Fleet&lt;/h3>
&lt;p>Since we have a fleet of warm gameservers, we need a way to request one of them for usage, and mark that it has
players accessing it (and therefore, it should not be deleted until they are finished with it).&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
In production, you would likely do the following through a &lt;a href="http://localhost:1313/docs/guides/access-api/">Kubernetes API call&lt;/a>, but we can also
do this through &lt;code>kubectl&lt;/code> as well, and ask it to return the response in yaml so that we can see what has happened.
&lt;/div>
&lt;p>We can do the allocation of a GameServer for usage through a &lt;code>GameServerAllocation&lt;/code>, which will both
return to us the details of a &lt;code>GameServer&lt;/code> (assuming one is available), and also move it to the &lt;code>Allocated&lt;/code> state,
which demarcates that it has players on it, and should not be removed until &lt;code>SDK.Shutdown()&lt;/code> is called, or it is manually deleted.&lt;/p>
&lt;p>It is worth noting that there is nothing specific that ties a &lt;code>GameServerAllocation&lt;/code> to a fleet.
A &lt;code>GameServerAllocation&lt;/code> uses a &lt;a href="https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/">label selector&lt;/a>
to determine what group of &lt;code>GameServers&lt;/code> it will attempt to allocate out of. That being said, a &lt;code>Fleet&lt;/code> and &lt;code>GameServerAllocation&lt;/code>
are often used in conjunction.&lt;/p>
&lt;p>
&lt;a href="https://github.com/josephbarnett/codeblind.ai/blob/release-1.38.0/" target="_blank" data-proofer-ignore>This example&lt;/a> uses the label selector to specifically target the &lt;code>simple-game-server&lt;/code> fleet that we just created.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserverallocation.yaml -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>For the full details of the YAML file head to the &lt;a href="http://localhost:1313/docs/reference/gameserverallocation/">GameServerAllocation Specification Guide&lt;/a>&lt;/p>
&lt;p>You should get back a response that looks like the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">apiVersion&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">allocation.agones.dev/v1&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">kind&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">GameServerAllocation&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">creationTimestamp&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">2019-02-19T02:13:12Z&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">simple-game-server-dph9b-hfk24&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">namespace&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">metadata&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>{}&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">required&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">matchLabels&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">agones.dev/fleet&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">simple-game-server&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">scheduling&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Packed&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline">&lt;/span>&lt;span style="color:#204a87;font-weight:bold">status&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">address&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">192.168.122.152&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">gameServerName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">simple-game-server-dph9b-hfk24&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">nodeName&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">minikube&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">ports&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">default&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">port&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#0000cf;font-weight:bold">7714&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">state&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">Allocated&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>If you look at the &lt;code>status&lt;/code> section, there are several things to take note of. The &lt;code>state&lt;/code> value will tell if
a &lt;code>GameServer&lt;/code> was allocated or not. If a &lt;code>GameServer&lt;/code> could not be found, this will be set to &lt;code>UnAllocated&lt;/code>.
If there are too many concurrent requests overwhelmed the system, &lt;code>state&lt;/code> will be set to
&lt;code>Contention&lt;/code> even though there are available &lt;code>GameServers&lt;/code>.&lt;/p>
&lt;p>However, we see that the &lt;code>status.state&lt;/code> value was set to &lt;code>Allocated&lt;/code>.
This means you have been successfully allocated a &lt;code>GameServer&lt;/code> out of the fleet, and you can now connect your players to it!&lt;/p>
&lt;p>You can see various immutable details of the &lt;code>GameServer&lt;/code> in the status - the &lt;code>address&lt;/code>, &lt;code>ports&lt;/code> and the name
of the &lt;code>GameServer&lt;/code>, in case you want to use it to retrieve more details.&lt;/p>
&lt;p>We can also check to see how many &lt;code>GameServers&lt;/code> you have &lt;code>Allocated&lt;/code> vs &lt;code>Ready&lt;/code> with the following command
(&amp;ldquo;gs&amp;rdquo; is shorthand for &amp;ldquo;gameserver&amp;rdquo;).&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a list of all the current &lt;code>GameServers&lt;/code> and their &lt;code>Status.State&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-sdhzn-kcmh6 Ready 192.168.122.205 7191 minikube 52m
simple-game-server-sdhzn-pdpk5 Ready 192.168.122.205 7752 minikube 53m
simple-game-server-sdhzn-r4d6x Allocated 192.168.122.205 7623 minikube 52m
simple-game-server-sdhzn-wng5k Ready 192.168.122.205 7709 minikube 53m
simple-game-server-sdhzn-wnhsw Ready 192.168.122.205 7478 minikube 52m
&lt;/code>&lt;/pre>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;code>GameServerAllocations&lt;/code> are create only and not stored for performance reasons, so you won&amp;rsquo;t be able to list
them after they have been created - but you can see their effects on &lt;code>GameServers&lt;/code>
&lt;/div>
&lt;p>A handy trick for checking to see how many &lt;code>GameServers&lt;/code> you have &lt;code>Allocated&lt;/code> vs &lt;code>Ready&lt;/code>, run the following:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a list of all the current &lt;code>GameServers&lt;/code> and their &lt;code>Status &amp;gt; State&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-tfqn7-c9tqz Ready 192.168.39.150 7136 minikube 52m
simple-game-server-tfqn7-g8fhq Allocated 192.168.39.150 7148 minikube 53m
simple-game-server-tfqn7-p8wnl Ready 192.168.39.150 7453 minikube 52m
simple-game-server-tfqn7-t6bwp Ready 192.168.39.150 7228 minikube 53m
simple-game-server-tfqn7-wkb7b Ready 192.168.39.150 7226 minikube 52m
&lt;/code>&lt;/pre>&lt;h3 id="5-scale-down-the-fleet">5. Scale down the Fleet&lt;/h3>
&lt;p>Not only can we scale our fleet up, but we can scale it down as well.&lt;/p>
&lt;p>The nice thing about Code Blind is that it is smart enough to know when &lt;code>GameServers&lt;/code> have been moved to &lt;code>Allocated&lt;/code>
and will automatically leave them running on scale down &amp;ndash; as we assume that players are playing on this game server,
and we shouldn&amp;rsquo;t disconnect them!&lt;/p>
&lt;p>Let&amp;rsquo;s scale down our Fleet to 0 (yep! you can do that!), and watch what happens.&lt;/p>
&lt;p>Run &lt;code>kubectl scale fleet simple-game-server --replicas=0&lt;/code> to change Replicas count from 5 to 0.&lt;/p>
&lt;p>It may take a moment for all the &lt;code>GameServers&lt;/code> to shut down, so let&amp;rsquo;s watch them all and see what happens:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>watch kubectl get gs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Eventually, one by one they will be removed from the list, and you should simply see:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATUS ADDRESS PORT NODE AGE
simple-game-server-tfqn7-g8fhq Allocated 192.168.39.150 7148 minikube 55m
&lt;/code>&lt;/pre>&lt;p>That lone &lt;code>Allocated&lt;/code> &lt;code>GameServer&lt;/code> is left all alone, but still running!&lt;/p>
&lt;p>If you would like, try editing the &lt;code>Fleet&lt;/code> configuration &lt;code>replicas&lt;/code> field and watch the list of &lt;code>GameServers&lt;/code>
grow and shrink.&lt;/p>
&lt;h3 id="6-connect-to-the-gameserver">6. Connect to the GameServer&lt;/h3>
&lt;p>Since we&amp;rsquo;ve only got one allocation, we&amp;rsquo;ll just grab the details of the IP and port of the
only allocated &lt;code>GameServer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gameservers &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep Allocated &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $3&amp;#34;:&amp;#34;$4 }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should output your Game Server IP address and port. (eg &lt;code>10.130.65.208:7936&lt;/code>)&lt;/p>
&lt;p>You can now communicate with the &lt;code>GameServer&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>nc -u {IP} {PORT}
Hello World !
ACK: Hello World !
EXIT
&lt;/code>&lt;/pre>&lt;p>You can finally type &lt;code>EXIT&lt;/code> which tells the SDK to run the &lt;a href="http://localhost:1313/docs/guides/client-sdks/#shutdown">Shutdown command&lt;/a>, and therefore shuts down the &lt;code>GameServer&lt;/code>.&lt;/p>
&lt;p>If you run &lt;code>kubectl describe gs | grep State&lt;/code> again - either the GameServer will be replaced with a new, &lt;code>Ready&lt;/code> &lt;code>GameServer&lt;/code>
, or it will be in &lt;code>Shutdown&lt;/code> state, on the way to being deleted.&lt;/p>
&lt;p>Since we are running a &lt;code>Fleet&lt;/code>, Code Blind will always do it&amp;rsquo;s best to ensure there are always the configured number
of &lt;code>GameServers&lt;/code> in the pool in either a &lt;code>Ready&lt;/code> or &lt;code>Allocated&lt;/code> state.&lt;/p>
&lt;h3 id="7-deploy-a-new-version-of-the-gameserver-on-the-fleet">7. Deploy a new version of the GameServer on the Fleet&lt;/h3>
&lt;p>We can also change the configuration of the &lt;code>GameServer&lt;/code> of the running &lt;code>Fleet&lt;/code>, and have the changes
roll out, without interrupting the currently &lt;code>Allocated&lt;/code> &lt;code>GameServers&lt;/code>.&lt;/p>
&lt;p>Let&amp;rsquo;s take this for a spin! Run &lt;code>kubectl scale fleet simple-game-server --replicas=5&lt;/code> to return Replicas count back to 5.&lt;/p>
&lt;p>Let&amp;rsquo;s also allocate ourselves a &lt;code>GameServer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserverallocation.yaml -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>We should now have four &lt;code>Ready&lt;/code> &lt;code>GameServers&lt;/code> and one &lt;code>Allocated&lt;/code>.&lt;/p>
&lt;p>We can check this by running &lt;code>kubectl get gs&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-tfqn7-c9tz7 Ready 192.168.39.150 7136 minikube 5m
simple-game-server-tfqn7-g8fhq Allocated 192.168.39.150 7148 minikube 5m
simple-game-server-tfqn7-n0wnl Ready 192.168.39.150 7453 minikube 5m
simple-game-server-tfqn7-hiiwp Ready 192.168.39.150 7228 minikube 5m
simple-game-server-tfqn7-w8z7b Ready 192.168.39.150 7226 minikube 5m
&lt;/code>&lt;/pre>&lt;p>In production, we&amp;rsquo;d likely be changing a &lt;code>containers &amp;gt; image&lt;/code> configuration to update our &lt;code>Fleet&lt;/code>
to run a new game server process, but to make this example simple, change &lt;code>containerPort&lt;/code> from &lt;code>7654&lt;/code>
to &lt;code>6000&lt;/code>.&lt;/p>
&lt;p>Run &lt;code>kubectl edit fleet simple-game-server&lt;/code>, and make the necessary changes, and then save and exit your editor.&lt;/p>
&lt;p>This will start the deployment of a new set of &lt;code>GameServers&lt;/code> running
with a Container Port of &lt;code>6000&lt;/code>.&lt;/p>
&lt;div class="alert alert-warning" role="alert">
&lt;h4 class="alert-heading">Warning&lt;/h4>
This will make it such that you can no longer connect to the simple-game-server game server.
&lt;/div>
&lt;p>Run &lt;code>kubectl describe gs | grep &amp;quot;Container Port&amp;quot;&lt;/code>
until you can see that there is
one with a containerPort of &lt;code>7654&lt;/code>, which is the &lt;code>Allocated&lt;/code> &lt;code>GameServer&lt;/code>, and four instances with a containerPort of &lt;code>6000&lt;/code> which
is the new configuration. You can also run &lt;code>kubectl get gs&lt;/code> and look at the &lt;strong>Age&lt;/strong> column to see that one &lt;code>GameServer&lt;/code> is much
older than the other four.&lt;/p>
&lt;p>You have now deployed a new version of your game!&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;ul>
&lt;li>Have a look at the &lt;a href="http://localhost:1313/docs/reference/gameserverallocation/">GameServerAllocation specification&lt;/a>, and see
how the extra functionality can enable smoke testing, server information communication, and more.&lt;/li>
&lt;li>You can now create a fleet autoscaler to automatically resize your fleet based on the actual usage.
See &lt;a href="http://localhost:1313/docs/getting-started/create-fleetautoscaler/">Create a Fleet Autoscaler&lt;/a>.&lt;/li>
&lt;li>Have a look at the &lt;a href="http://localhost:1313/docs/integration-patterns/">GameServer Integration Patterns&lt;/a>,
to give you a set of examples on how all the pieces fit together with your matchmaker and other systems.&lt;/li>
&lt;li>Or if you want to try to use your own GameServer container make sure you have properly integrated the &lt;a href="http://localhost:1313/docs/guides/client-sdks/">Code Blind SDK&lt;/a>.&lt;/li>
&lt;li>If you would like to learn how to programmatically allocate a Game Server from the fleet, see how to &lt;a href="http://localhost:1313/docs/guides/access-api/">Access Code Blind via the Kubernetes API&lt;/a> or alternatively use the &lt;a href="http://localhost:1313/docs/advanced/allocator-service/">Allocator Service&lt;/a>, depending on your needs.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Quickstart: Create a Fleet Autoscaler</title><link>http://localhost:1313/docs/getting-started/create-fleetautoscaler/</link><pubDate>Wed, 02 Jan 2019 06:42:33 +0000</pubDate><guid>http://localhost:1313/docs/getting-started/create-fleetautoscaler/</guid><description>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;p>It is assumed that you have followed the instructions to &lt;a href="http://localhost:1313/docs/getting-started/create-fleet/">Create a Game Server Fleet&lt;/a>
and you have a running fleet of game servers.&lt;/p>
&lt;h2 id="objectives">Objectives&lt;/h2>
&lt;ul>
&lt;li>Create a Fleet Autoscaler in Kubernetes using Code Blind custom resource.&lt;/li>
&lt;li>Watch the Fleet scale up when allocating GameServers&lt;/li>
&lt;li>Watch the Fleet scale down when shutting down allocated GameServers&lt;/li>
&lt;li>Edit the autoscaler specification to apply live changes&lt;/li>
&lt;/ul>
&lt;h3 id="1-create-a-fleet-autoscaler">1. Create a Fleet Autoscaler&lt;/h3>
&lt;p>Let&amp;rsquo;s create a Fleet Autoscaler using the following command :&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/fleetautoscaler.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see a successful output similar to this :&lt;/p>
&lt;pre tabindex="0">&lt;code>fleetautoscaler.autoscaling.agones.dev/simple-game-server-autoscaler created
&lt;/code>&lt;/pre>&lt;p>This has created a FleetAutoscaler record inside Kubernetes.&lt;/p>
&lt;h3 id="2-see-the-autoscaler-status">2. See the autoscaler status.&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler simple-game-server-autoscaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Name: simple-game-server-autoscaler
Namespace: default
Labels: &amp;lt;none&amp;gt;
Annotations: kubectl.kubernetes.io/last-applied-configuration={&amp;#34;apiVersion&amp;#34;:&amp;#34;au
toscaling.agones.dev/v1&amp;#34;,&amp;#34;kind&amp;#34;:&amp;#34;FleetAutoscaler&amp;#34;,&amp;#34;metadata&amp;#34;:{&amp;#34;annotations&amp;#34;:{},
&amp;#34;name&amp;#34;:&amp;#34;simple-game-server-autoscaler&amp;#34;,&amp;#34;namespace&amp;#34;:&amp;#34;default&amp;#34;},...
API Version: autoscaling.agones.dev/v1
Kind: FleetAutoscaler
Metadata:
Cluster Name:
Creation Timestamp: 2018-10-02T15:19:58Z
Generation: 1
Owner References:
API Version: autoscaling.agones.dev/v1
Block Owner Deletion: true
Controller: true
Kind: Fleet
Name: simple-game-server
UID: 9960762e-c656-11e8-933e-fa163e07a1d4
Resource Version: 6123197
Self Link: /apis/autoscaling.agones.dev/v1/namespaces/default/fleetautoscalers/simple-game-server-autoscaler
UID: 9fd0efa1-c656-11e8-933e-fa163e07a1d4
Spec:
Fleet Name: simple-game-server
Policy:
Buffer:
Buffer Size: 2
Max Replicas: 10
Min Replicas: 2
Type: Buffer
Status:
Able To Scale: true
Current Replicas: 2
Desired Replicas: 2
Last Scale Time: &amp;lt;nil&amp;gt;
Scaling Limited: false
Events: &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You can see the status (able to scale, not limited), the last time the fleet was scaled (nil for never)
and the current and desired fleet size.&lt;/p>
&lt;p>The autoscaler works by changing the desired size, and the fleet creates/deletes game server instances
to achieve that number. The convergence is achieved in time, which is usually measured in seconds.&lt;/p>
&lt;h3 id="3-allocate-a-game-server-from-the-fleet">3. Allocate a Game Server from the Fleet&lt;/h3>
&lt;p>If you&amp;rsquo;re interested in more details for game server allocation, you should consult the &lt;a href="http://localhost:1313/docs/getting-started/create-fleet/">Create a Game Server Fleet&lt;/a> page.
In here we are only interested in triggering allocations to see the autoscaler in action.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserverallocation.yaml -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should get in return the allocated game server details, which should end with something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>status:
address: 34.94.118.237
gameServerName: simple-game-server-v6jwb-6bzkz
nodeName: gke-test-cluster-default-f11755a7-5km3
ports:
- name: default
port: 7832
state: Allocated
&lt;/code>&lt;/pre>&lt;p>Note the address and port, you might need them later to connect to the server.&lt;/p>
&lt;h3 id="4-see-the-autoscaler-in-action">4. See the autoscaler in action&lt;/h3>
&lt;p>Now let&amp;rsquo;s wait a few seconds to allow the autoscaler to detect the change in the fleet and check again its status&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler simple-game-server-autoscaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last part should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Spec:
Fleet Name: simple-game-server
Policy:
Buffer:
Buffer Size: 2
Max Replicas: 10
Min Replicas: 2
Type: Buffer
Status:
Able To Scale: true
Current Replicas: 3
Desired Replicas: 3
Last Scale Time: 2018-10-02T16:00:02Z
Scaling Limited: false
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal AutoScalingFleet 2m fleetautoscaler-controller Scaling fleet simple-game-server from 2 to 3
&lt;/code>&lt;/pre>&lt;p>You can see that the fleet size has increased, the autoscaler having compensated for the allocated instance.
Last Scale Time has been updated, and a scaling event has been logged.&lt;/p>
&lt;p>Double-check the actual number of game server instances and status by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a list of all the current &lt;code>GameServers&lt;/code> and their &lt;code>Status &amp;gt; State&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-mzhrl-hz8wk Allocated 10.30.64.99 7131 minikube 5m
simple-game-server-mzhrl-k6jg5 Ready 10.30.64.100 7243 minikube 5m
simple-game-server-mzhrl-n2sk2 Ready 10.30.64.168 7658 minikube 5m
&lt;/code>&lt;/pre>&lt;h3 id="5-shut-the-allocated-instance-down">5. Shut the allocated instance down&lt;/h3>
&lt;p>Since we&amp;rsquo;ve only got one allocation, we&amp;rsquo;ll just grab the details of the IP and port of the
only allocated &lt;code>GameServer&lt;/code>:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gameservers &lt;span style="color:#000;font-weight:bold">|&lt;/span> grep Allocated &lt;span style="color:#000;font-weight:bold">|&lt;/span> awk &lt;span style="color:#4e9a06">&amp;#39;{print $3&amp;#34;:&amp;#34;$4 }&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This should output your Game Server IP address and port. (eg &lt;code>10.130.65.208:7936&lt;/code>)&lt;/p>
&lt;p>You can now communicate with the &lt;code>GameServer&lt;/code>:&lt;/p>
&lt;pre tabindex="0">&lt;code>nc -u {IP} {PORT}
Hello World !
ACK: Hello World !
EXIT
&lt;/code>&lt;/pre>&lt;p>You can finally type &lt;code>EXIT&lt;/code> which tells the SDK to run the &lt;a href="http://localhost:1313/docs/guides/client-sdks/#shutdown">Shutdown command&lt;/a>, and therefore shuts down the &lt;code>GameServer&lt;/code>.&lt;/p>
&lt;h3 id="6-see-the-fleet-scaling-down">6. See the fleet scaling down&lt;/h3>
&lt;p>Now let&amp;rsquo;s wait a few seconds to allow the autoscaler to detect the change in the fleet and check again its status&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler simple-game-server-autoscaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Spec:
Fleet Name: simple-game-server
Policy:
Buffer:
Buffer Size: 2
Max Replicas: 10
Min Replicas: 2
Type: Buffer
Status:
Able To Scale: true
Current Replicas: 3
Desired Replicas: 2
Last Scale Time: 2018-10-02T16:09:02Z
Scaling Limited: false
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal AutoScalingFleet 9m fleetautoscaler-controller Scaling fleet simple-game-server from 2 to 3
Normal AutoScalingFleet 45s fleetautoscaler-controller Scaling fleet simple-game-server from 3 to 2
&lt;/code>&lt;/pre>&lt;p>You can see that the fleet size has decreased, the autoscaler adjusting to game server instance being de-allocated,
the Last Scale Time and the events have been updated. Note that simple-game-server game server instance you just closed earlier
might stay a bit in &amp;lsquo;Unhealthy&amp;rsquo; state (and its pod in &amp;lsquo;Terminating&amp;rsquo; until it gets removed.&lt;/p>
&lt;p>Double-check the actual number of game server instances and status by running&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a list of all the current &lt;code>GameServers&lt;/code> and their &lt;code>Status &amp;gt; State&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-mzhrl-k6jg5 Ready 10.30.64.100 7243 minikube 5m
simple-game-server-mzhrl-t7944 Ready 10.30.64.168 7561 minikube 5m
&lt;/code>&lt;/pre>&lt;h3 id="7-change-autoscaling-parameters">7. Change autoscaling parameters&lt;/h3>
&lt;p>We can also change the configuration of the &lt;code>FleetAutoscaler&lt;/code> of the running &lt;code>Fleet&lt;/code>, and have the changes
applied live, without interruptions of service.&lt;/p>
&lt;p>Run &lt;code>kubectl edit fleetautoscaler simple-game-server-autoscaler&lt;/code> and set the &lt;code>bufferSize&lt;/code> field to &lt;code>5&lt;/code>.&lt;/p>
&lt;p>Let&amp;rsquo;s look at the list of game servers again. Run &lt;code>watch kubectl get gs&lt;/code>
until you can see that are 5 ready server instances:&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-mzhrl-7jpkp Ready 10.30.64.100 7019 minikube 5m
simple-game-server-mzhrl-czt8v Ready 10.30.64.168 7556 minikube 5m
simple-game-server-mzhrl-k6jg5 Ready 10.30.64.100 7243 minikube 5m
simple-game-server-mzhrl-nb8h2 Ready 10.30.64.168 7357 minikube 5m
simple-game-server-mzhrl-qspb6 Ready 10.30.64.99 7859 minikube 5m
simple-game-server-mzhrl-zg9rq Ready 10.30.64.99 7745 minikube 5m
&lt;/code>&lt;/pre>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
&lt;p>If you want to update a &lt;code>Fleet&lt;/code> which has &lt;code>RollingUpdate&lt;/code> replacement strategy and is controlled by a &lt;code>FleetAutoscaler&lt;/code>:&lt;/p>
&lt;ol>
&lt;li>With &lt;code>kubectl apply&lt;/code>: you should omit &lt;code>replicas&lt;/code> parameter in a &lt;code>Fleet&lt;/code> Spec before re-applying the &lt;code>Fleet&lt;/code> configuration.&lt;/li>
&lt;li>With &lt;code>kubectl edit&lt;/code>: you should not change the &lt;code>replicas&lt;/code> parameter in the &lt;code>Fleet&lt;/code> Spec when updating other field parameters.&lt;/li>
&lt;/ol>
&lt;p>If you follow the rules above, then the &lt;code>maxSurge&lt;/code> and &lt;code>maxUnavailable&lt;/code> parameters will be used as the RollingUpdate strategy updates your Fleet.
Otherwise the Fleet would be scaled according to Fleet &lt;code>replicas&lt;/code> parameter first and only after a certain amount of time it would be rescaled to fit &lt;code>FleetAutoscaler&lt;/code> &lt;code>BufferSize&lt;/code> parameter.&lt;/p>
&lt;p>You could also check the behaviour of the Fleet with Fleetautoscaler on a test &lt;code>Fleet&lt;/code> to preview what would occur in your production environment.&lt;/p>
&lt;/div>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>Read the advanced &lt;a href="http://localhost:1313/docs/advanced/scheduling-and-autoscaling/">Scheduling and Autoscaling&lt;/a> guide, for more details on autoscaling.&lt;/p>
&lt;p>If you want to use your own GameServer container make sure you have properly integrated the &lt;a href="http://localhost:1313/docs/guides/client-sdks/">Code Blind SDK&lt;/a>.&lt;/p></description></item><item><title>Docs: Quickstart: Create a Fleet Autoscaler with Webhook Policy</title><link>http://localhost:1313/docs/getting-started/create-webhook-fleetautoscaler/</link><pubDate>Wed, 02 Jan 2019 06:42:44 +0000</pubDate><guid>http://localhost:1313/docs/getting-started/create-webhook-fleetautoscaler/</guid><description>
&lt;p>In some cases, your game servers may need to use custom logic for scaling your fleet that is more complex than what
can be expressed using the Buffer policy in the fleetautoscaler. This guide shows how you can extend Code Blind
with an autoscaler webhook to implement a custom autoscaling policy.&lt;/p>
&lt;p>When you use an autoscaler webhook the logic computing the number of target replicas is delegated to an external
HTTP/S endpoint, such as one provided by a Kubernetes deployment and service in the same cluster (as shown in the
examples below). The fleetautoscaler will send a request to the webhook autoscaler&amp;rsquo;s &lt;code>/scale&lt;/code> endpoint every sync
period (currently 30s) with a JSON body, and scale the target fleet based on the data that is returned.&lt;/p>
&lt;h2 id="chapter-1-configuring-http-fleetautoscaler-webhook">Chapter 1 Configuring HTTP fleetautoscaler webhook&lt;/h2>
&lt;h3 id="prerequisites">Prerequisites&lt;/h3>
&lt;p>It is assumed that you have completed the instructions to &lt;a href="http://localhost:1313/docs/getting-started/create-fleet/">Create a Game Server Fleet&lt;/a> and have a running fleet of game servers.&lt;/p>
&lt;h3 id="objectives">Objectives&lt;/h3>
&lt;ul>
&lt;li>Run a fleet&lt;/li>
&lt;li>Deploy the Webhook Pod and service for autoscaling&lt;/li>
&lt;li>Create a Fleet Autoscaler with Webhook policy type in Kubernetes using Code Blind custom resource&lt;/li>
&lt;li>Watch the Fleet scales up when allocating GameServers&lt;/li>
&lt;li>Watch the Fleet scales down after GameServer shutdown&lt;/li>
&lt;/ul>
&lt;h4 id="1-deploy-the-fleet">1. Deploy the fleet&lt;/h4>
&lt;p>Run a fleet in a cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/fleet.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-deploy-a-webhook-service-for-autoscaling">2. Deploy a Webhook service for autoscaling&lt;/h4>
&lt;p>In this step we would deploy an example webhook that will control the size of the fleet based on allocated gameservers
portion in a fleet. You can see the source code for this example webhook server
&lt;a href="https://github.com/josephbarnett/codeblind.ai/blob/release-1.38.0/" target="_blank" data-proofer-ignore>here&lt;/a>.
The fleetautoscaler would trigger this endpoint every 30 seconds. More details could be found
&lt;a href="https://github.com/josephbarnett/codeblind.ai/blob/release-1.38.0/" target="_blank" data-proofer-ignore>also here&lt;/a>.
We need to create a pod which will handle HTTP requests with json payload
&lt;a href="http://localhost:1313/docs/reference/fleetautoscaler/#webhook-endpoint-specification">&lt;code>FleetAutoscaleReview&lt;/code>&lt;/a> and return back it
with &lt;a href="http://localhost:1313/docs/reference/fleetautoscaler/#webhook-endpoint-specification">&lt;code>FleetAutoscaleResponse&lt;/code>&lt;/a> populated.&lt;/p>
&lt;p>The &lt;code>Scale&lt;/code> flag and &lt;code>Replicas&lt;/code> values returned in the &lt;code>FleetAutoscaleResponse&lt;/code> tells the FleetAutoscaler what target size the backing Fleet should be scaled up or down to. If &lt;code>Scale&lt;/code> is false - no scaling occurs.&lt;/p>
&lt;p>Run next command to create a service and a Webhook pod in a cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/autoscaler-webhook/autoscaler-service.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To check that it is running and liveness probe is fine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe pod autoscaler-webhook
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>Name: autoscaler-webhook-86944884c4-sdtqh
Namespace: default
Node: gke-test-cluster-default-1c5dec79-h0tq/10.138.0.2
...
Status: Running
&lt;/code>&lt;/pre>&lt;h4 id="3-create-a-fleet-autoscaler">3. Create a Fleet Autoscaler&lt;/h4>
&lt;p>Let&amp;rsquo;s create a Fleet Autoscaler using the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/webhookfleetautoscaler.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see a successful output similar to this:&lt;/p>
&lt;pre tabindex="0">&lt;code>fleetautoscaler.autoscaling.agones.dev &amp;#34;webhook-fleet-autoscaler&amp;#34; created
&lt;/code>&lt;/pre>&lt;p>This has created a FleetAutoscaler record inside Kubernetes.
It has the link to Webhook service we deployed above.&lt;/p>
&lt;h4 id="4-see-the-fleet-and-autoscaler-status">4. See the fleet and autoscaler status.&lt;/h4>
&lt;p>In order to track the list of gameservers which run in your fleet you can run this command in a separate terminal tab:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> watch &lt;span style="color:#4e9a06">&amp;#34;kubectl get gs -n default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>In order to get autoscaler status use the following command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler webhook-fleet-autoscaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>It should look something like this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Name: webhook-fleet-autoscaler
Namespace: default
Labels: &amp;lt;none&amp;gt;
Annotations: kubectl.kubernetes.io/last-applied-configuration={&amp;#34;apiVersion&amp;#34;:
&amp;#34;autoscaling.agones.dev/v1&amp;#34;,&amp;#34;kind&amp;#34;:&amp;#34;FleetAutoscaler&amp;#34;,&amp;#34;metadata&amp;#34;:{&amp;#34;annotations&amp;#34;
:{},&amp;#34;name&amp;#34;:&amp;#34;webhook-fleet-autoscaler&amp;#34;,&amp;#34;namespace&amp;#34;:&amp;#34;default...
API Version: autoscaling.agones.dev/v1
Kind: FleetAutoscaler
etadata:
Cluster Name:
Creation Timestamp: 2018-12-22T12:52:23Z
Generation: 1
Resource Version: 2274579
Self Link: /apis/autoscaling.agones.dev/v1/namespaces/default/fleet
autoscalers/webhook-fleet-autoscaler
UID: 6d03eae4-05e8-11e9-84c2-42010a8a01c9
Spec:
Fleet Name: simple-game-server
Policy:
Type: Webhook
Webhook:
Service:
Name: autoscaler-webhook-service
Namespace: default
Path: scale
URL:
Status:
Able To Scale: true
Current Replicas: 2
Desired Replicas: 2
Last Scale Time: &amp;lt;nil&amp;gt;
Scaling Limited: false
Events: &amp;lt;none&amp;gt;
&lt;/code>&lt;/pre>&lt;p>You can see the status (able to scale, not limited), the last time the fleet was scaled (nil for never), current and desired fleet size.&lt;/p>
&lt;p>The autoscaler makes a query to a webhoook service deployed on step 1 and on response changing the target Replica size, and the fleet creates/deletes game server instances
to achieve that number. The convergence is achieved in time, which is usually measured in seconds.&lt;/p>
&lt;h4 id="5-allocate-game-servers-from-the-fleet-to-trigger-scale-up">5. Allocate Game Servers from the Fleet to trigger scale up&lt;/h4>
&lt;p>If you&amp;rsquo;re interested in more details for game server allocation, you should consult the &lt;a href="http://localhost:1313/docs/getting-started/create-fleet/">Create a Game Server Fleet&lt;/a> page.
Here we only interested in triggering allocations to see the autoscaler in action.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserverallocation.yaml -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should get in return the allocated game server details, which should end with something like:&lt;/p>
&lt;pre tabindex="0">&lt;code>status:
address: 34.94.118.237
gameServerName: simple-game-server-v6jwb-6bzkz
nodeName: gke-test-cluster-default-f11755a7-5km3
ports:
- name: default
port: 7832
state: Allocated
&lt;/code>&lt;/pre>&lt;p>Note the address and port, you might need them later to connect to the server.&lt;/p>
&lt;p>Run the kubectl command one more time so that we have both servers allocated:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserverallocation.yaml -o yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="6-check-new-autoscaler-and-fleet-status">6. Check new Autoscaler and Fleet status&lt;/h4>
&lt;p>Now let&amp;rsquo;s wait a few seconds to allow the autoscaler to detect the change in the fleet and check again its status&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler webhook-fleet-autoscaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last part should look similar to this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Spec:
Fleet Name: simple-game-server
Policy:
Type: Webhook
Webhook:
Service:
Name: autoscaler-webhook-service
Namespace: default
Path: scale
URL:
Status:
Able To Scale: true
Current Replicas: 4
Desired Replicas: 4
Last Scale Time: 2018-12-22T12:53:47Z
Scaling Limited: false
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal AutoScalingFleet 35s fleetautoscaler-controller Scaling fleet simple-game-server from 2 to 4
&lt;/code>&lt;/pre>&lt;p>You can see that the fleet size has increased in particular case doubled to 4 gameservers (based on our custom logic in our webhook), the autoscaler having compensated for the two allocated instances.
Last Scale Time has been updated and a scaling event has been logged.&lt;/p>
&lt;p>Double-check the actual number of game server instances and status by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> kubectl get gs -n default
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a list of all the current &lt;code>GameServers&lt;/code> and their &lt;code>Status &amp;gt; State&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-dmkp4-8pkk2 Ready 35.247.13.175 7386 minikube 5m
simple-game-server-dmkp4-b7x87 Allocated 35.247.13.175 7219 minikube 5m
simple-game-server-dmkp4-r4qtt Allocated 35.247.13.175 7220 minikube 5m
simple-game-server-dmkp4-rsr6n Ready 35.247.13.175 7297 minikube 5m
&lt;/code>&lt;/pre>&lt;h4 id="7-check-downscaling-using-webhook-autoscaler-policy">7. Check downscaling using Webhook Autoscaler policy&lt;/h4>
&lt;p>Based on our custom webhook deployed earlier, if the fraction of allocated replicas in whole Replicas count would be less than threshold (0.3) then the fleet would scale down by scaleFactor, in our example by 2.&lt;/p>
&lt;p>Note that the example webhook server has a limitation that it would not decrease fleet replica count under &lt;code>minReplicasCount&lt;/code>, which is equal to 2.&lt;/p>
&lt;p>We need to run EXIT command on one gameserver (Use IP address and port of the allocated gameserver from the previous step) in order to decrease the number of allocated gameservers in a fleet (&amp;lt;0.3).&lt;/p>
&lt;pre tabindex="0">&lt;code>nc -u 35.247.13.175 7220
EXIT
&lt;/code>&lt;/pre>&lt;p>Server would be in shutdown state.
Wait about 30 seconds.
Then you should see scaling down event in the output of next command:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler webhook-fleet-autoscaler
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You should see these lines in events:&lt;/p>
&lt;pre tabindex="0">&lt;code> Normal AutoScalingFleet 11m fleetautoscaler-controller Scaling fleet simple-game-server from 2 to 4
Normal AutoScalingFleet 1m fleetautoscaler-controller Scaling fleet simple-game-server from 4 to 2
&lt;/code>&lt;/pre>&lt;p>And get gameservers command output:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs -n default
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;pre tabindex="0">&lt;code>NAME STATUS ADDRESS PORT NODE AGE
simple-game-server-884fg-6q5sk Ready 35.247.117.202 7373 minikube 5m
simple-game-server-884fg-b7l58 Allocated 35.247.117.202 7766 minikube 5m
&lt;/code>&lt;/pre>&lt;h4 id="8-cleanup">8. Cleanup&lt;/h4>
&lt;p>You can delete the autoscaler service and associated resources with the following commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl delete -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/autoscaler-webhook/autoscaler-service.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Removing the fleet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl delete -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/fleet.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="chapter-2-configuring-https-fleetautoscaler-webhook-with-ca-bundle">Chapter 2 Configuring HTTPS fleetautoscaler webhook with CA Bundle&lt;/h2>
&lt;h3 id="objectives-1">Objectives&lt;/h3>
&lt;p>Using TLS and a certificate authority (CA) bundle we can establish trusted communication between Fleetautoscaler and
an HTTPS server running the autoscaling webhook that controls the size of the fleet (Replicas count). The certificate of the
autoscaling webhook must be signed by the CA provided in fleetautoscaler yaml configuration file. Using TLS eliminates
the possibility of a man-in-the-middle attack between the fleetautoscaler and the autoscaling webhook.&lt;/p>
&lt;h4 id="1-deploy-the-fleet-1">1. Deploy the fleet&lt;/h4>
&lt;p>Run a fleet in a cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/fleet.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="2-create-x509-root-and-webhook-certificates">2. Create X509 Root and Webhook certificates&lt;/h4>
&lt;p>The procedure of generating a Self-signed CA certificate is as follows:&lt;/p>
&lt;p>The first step is to create the private root key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl genrsa -out rootCA.key &lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The next step is to self-sign this certificate:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl req -x509 -new -nodes -key rootCA.key -sha256 -days &lt;span style="color:#0000cf;font-weight:bold">1024&lt;/span> -out rootCA.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will start an interactive script that will ask you for various bits of information. Fill it out as you see fit.&lt;/p>
&lt;p>Every webhook that you wish to install a trusted certificate will need to go through this process. First, just like with the root CA step, you’ll need to create a private key (different from the root CA):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl genrsa -out webhook.key &lt;span style="color:#0000cf;font-weight:bold">2048&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Next create configuration file &lt;code>cert.conf&lt;/code> for the certificate signing request:&lt;/p>
&lt;pre tabindex="0">&lt;code class="language-none" data-lang="none">[req]
distinguished_name = req_distinguished_name
req_extensions = v3_req
prompt = no
[req_distinguished_name]
CN = autoscaler-tls-service.default.svc
[v3_req]
keyUsage = digitalSignature
extendedKeyUsage = serverAuth
subjectAltName = @alt_names
[alt_names]
DNS.1 = autoscaler-tls-service.default.svc
&lt;/code>&lt;/pre>&lt;p>Generate the certificate signing request, use valid hostname which in this case will be &lt;code>autoscaler-tls-service.default.svc&lt;/code> as &lt;code>Common Name (eg, fully qualified host name)&lt;/code> as well as &lt;code>DNS.1&lt;/code> in the &lt;code>alt_names&lt;/code> section of the config file.&lt;/p>
&lt;p>Check the &lt;a href="https://kubernetes.io/docs/concepts/services-networking/dns-pod-service/#a-aaaa-records">Kubernetes documentation&lt;/a> to see how Services get assigned DNS entries.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl req -new -out webhook.csr -key webhook.key -config cert.conf
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Once that’s done, you’ll sign the CSR, which requires the CA root key:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>openssl x509 -req -in webhook.csr -CA rootCA.pem -CAkey rootCA.key -CAcreateserial -out webhook.crt -days &lt;span style="color:#0000cf;font-weight:bold">500&lt;/span> -sha256 -extfile cert.conf -extensions v3_req
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This would generate webhook.crt certificate&lt;/p>
&lt;p>Add secret which later would be mounted to autoscaler-webhook-tls pod.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl create secret tls autoscalersecret --cert&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>webhook.crt --key&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>webhook.key
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You need to put Base64-encoded string into caBundle field in your fleetautoscaler yaml configuration:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>base64 -i ./rootCA.pem
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Copy the output of the command above and replace the caBundle field in your text editor (say vim) with the new value:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>wget https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/webhookfleetautoscalertls.yaml
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>vim ./webhookfleetautoscalertls.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="3-deploy-a-webhook-service-for-autoscaling">3. Deploy a Webhook service for autoscaling&lt;/h4>
&lt;p>Run next command to create a service and a Webhook pod in a cluster:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/autoscaler-webhook/autoscaler-service-tls.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To check that it is running and liveness probe is fine:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe pod autoscaler-webhook-tls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Wait for the Running status results:&lt;/p>
&lt;pre tabindex="0">&lt;code>Name: autoscaler-webhook-tls-f74c9bff7-ssrsc
Namespace: default
...
Status: Running
&lt;/code>&lt;/pre>&lt;h4 id="4-create-a-fleet-autoscaler">4. Create a Fleet Autoscaler&lt;/h4>
&lt;p>Let&amp;rsquo;s create a Fleet Autoscaler using the following command (caBundle should be set properly on Step 2):&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f ./webhookfleetautoscalertls.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="5-see-the-fleet-and-autoscaler-status">5. See the fleet and autoscaler status.&lt;/h4>
&lt;p>In order to track the list of gameservers which run in your fleet you can run this command in a separate terminal tab:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> watch &lt;span style="color:#4e9a06">&amp;#34;kubectl get gs -n default&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="6-allocate-two-game-servers-from-the-fleet-to-trigger-scale-up">6. Allocate two Game Servers from the Fleet to trigger scale up&lt;/h4>
&lt;p>If you&amp;rsquo;re interested in more details for game server allocation, you should consult the &lt;a href="http://localhost:1313/docs/getting-started/create-fleet/">Create a Game Server Fleet&lt;/a> page.
Here we only interested in triggering allocations to see the autoscaler in action.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">for&lt;/span> i in &lt;span style="color:#ce5c00;font-weight:bold">{&lt;/span>0..1&lt;span style="color:#ce5c00;font-weight:bold">}&lt;/span> &lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">do&lt;/span> kubectl create -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/gameserverallocation.yaml -o yaml &lt;span style="color:#000;font-weight:bold">;&lt;/span> &lt;span style="color:#204a87;font-weight:bold">done&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h4 id="7-check-new-autoscaler-and-fleet-status">7. Check new Autoscaler and Fleet status&lt;/h4>
&lt;p>Now let&amp;rsquo;s wait a few seconds to allow the autoscaler to detect the change in the fleet and check again its status&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler webhook-fleetautoscaler-tls
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>The last part should look similar to this:&lt;/p>
&lt;pre tabindex="0">&lt;code>Spec:
Fleet Name: simple-game-server
Policy:
Type: Webhook
Webhook:
Ca Bundle: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN1RENDQWFBQ0NRQ29kcEFNbTlTd0pqQU5CZ2txaGtpRzl3MEJBUXNGQURBZU1Rc3dDUVlEVlFRR0V3SlYKVXpFUE1BMEdBMVVFQ3d3R1FXZHZibVZ6TUI0WERURTVNREV3TkRFeE5URTBORm9YRFRJeE1UQXlOREV4TlRFMApORm93SGpFTE1Ba0dBMVVFQmhNQ1ZWTXhEekFOQmdOVkJBc01Ca0ZuYjI1bGN6Q0NBU0l3RFFZSktvWklodmNOCkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOQ0h5dndDOTZwZDlTdkFhMUIvRWg2ekcxeDBLS1dPaVhtNzhJcngKKzZ5WHd5YVpsMVo1cVExbUZoOThMSGVZUmQwWVgzRTJnelZ5bFpvUlUra1ZESzRUc0VzV0tNUFVpdVo0MUVrdApwbythbEN6alAyaXZzRGZaOGEvdnByL3dZZ2FrWGtWalBUaGpKUk9xTnFIdWROMjZVcUFJYnNOTVpoUkxkOVFFCnFLSjRPNmFHNVMxTVNqZFRGVHFlbHJiZitDcXNKaHltZEIzZmxGRUVvdXExSmoxS0RoQjRXWlNTbS9VSnpCNkcKNHUzY3BlQm1jTFVRR202ZlFHb2JFQSt5SlpMaEVXcXBrd3ZVZ2dCNmRzWE8xZFNIZXhhZmlDOUVUWGxVdFRhZwo1U2JOeTVoYWRWUVV3Z253U0J2djR2R0t1UUxXcWdXc0JyazB5Wll4Sk5Bb0V5RUNBd0VBQVRBTkJna3Foa2lHCjl3MEJBUXNGQUFPQ0FRRUFRMkgzaWJRcWYzQTNES2l1eGJISURkbll6TlZ2Z0dhRFpwaVZyM25ocm55dmxlNVgKR09hRm0rMjdRRjRWV29FMzZDTGhYZHpEWlM4bEpIY09YUW5KOU83Y2pPYzkxVmh1S2NmSHgwS09hU1oweVNrVAp2bEtXazlBNFdoNGE0QXFZSlc3Z3BUVHR1UFpydnc4VGsvbjFaWEZOYVdBeDd5RU5OdVdiODhoNGRBRDVaTzRzCkc5SHJIdlpuTTNXQzFBUXA0Q3laRjVyQ1I2dkVFOWRkUmlKb3IzM3pLZTRoRkJvN0JFTklZZXNzZVlxRStkcDMKK0g4TW5LODRXeDFUZ1N5Vkp5OHlMbXFpdTJ1aThjaDFIZnh0OFpjcHg3dXA2SEZLRlRsTjlBeXZUaXYxYTBYLwpEVTk1eTEwdi9oTlc0WHpuMDJHNGhrcjhzaUduSEcrUEprT3hBdz09Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
Service: &amp;lt;nil&amp;gt;
URL: https://autoscaler-tls-service.default.svc:8000/scale
Events:
Type Reason Age From Message
---- ------ ---- ---- -------
Normal AutoScalingFleet 5s fleetautoscaler-controller Scaling fleet simple-game-server from 2 to 4
&lt;/code>&lt;/pre>&lt;p>You can see that the fleet size has increased in particular case doubled to 4 gameservers (based on our custom logic in our webhook), the autoscaler having compensated for the two allocated instances.
Last Scale Time has been updated and a scaling event has been logged.&lt;/p>
&lt;p>Double-check the actual number of game server instances and status by running:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span> kubectl get gs -n default
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>This will get you a list of all the current &lt;code>GameServers&lt;/code> and their &lt;code>Status &amp;gt; State&lt;/code>.&lt;/p>
&lt;pre tabindex="0">&lt;code>NAME STATE ADDRESS PORT NODE AGE
simple-game-server-njmr7-2t4nx Ready 35.203.159.68 7330 minikube 1m
simple-game-server-njmr7-65rp6 Allocated 35.203.159.68 7294 minikube 4m
&lt;/code>&lt;/pre>&lt;h4 id="8-cleanup-1">8. Cleanup&lt;/h4>
&lt;p>You can delete the autoscaler service and associated resources with the following commands.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl delete -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/autoscaler-webhook/autoscaler-service-tls.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Removing x509 key secret:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl delete secret autoscalersecret
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Removing the fleet:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl delete -f https://raw.githubusercontent.com/googleforgames/agones/release-1.38.0/examples/simple-game-server/fleet.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="comments">Comments&lt;/h3>
&lt;p>Note that secure communication has been established and we can trust that communication between the fleetautoscaler and
the autoscaling webhook. If you need to run the autoscaling webhook outside of the Kubernetes cluster, you can use
another root certificate authority as long as you put it into the caBundle parameter in fleetautoscaler configuration
(in pem format, base64-encoded).&lt;/p>
&lt;h2 id="troubleshooting-guide">Troubleshooting Guide&lt;/h2>
&lt;p>If you run into problems with the configuration of your fleetautoscaler and webhook service the easiest way to debug
them is to run:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe fleetautoscaler &amp;lt;FleetAutoScalerName&amp;gt;
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>and inspect the events at the bottom of the output.&lt;/p>
&lt;h3 id="common-error-messages">Common error messages.&lt;/h3>
&lt;p>If you have configured the wrong service Path for the FleetAutoscaler you will see a message like&lt;/p>
&lt;pre tabindex="0">&lt;code>Error calculating desired fleet size on FleetAutoscaler simple-fleet-r7fdv-autoscaler. Error: bad status code 404 from the server: https://autoscaler-tls-service.default.svc:8000/scale
&lt;/code>&lt;/pre>&lt;p>If you are using a hostname other than &lt;code>autoscaler-tls-service.default.svc&lt;/code> as the
&lt;code>Common Name (eg, fully qualified host name)&lt;/code> when creating a certificate using &lt;code>openssl&lt;/code> tool you will see a
message like&lt;/p>
&lt;pre tabindex="0">&lt;code>Post https://autoscaler-tls-service.default.svc:8000/scale: x509: certificate is not valid for any names, but wanted to match autoscaler-tls-service.default.svc
&lt;/code>&lt;/pre>&lt;p>If you see errors like the following in &lt;code>autoscaler-webhook-tls&lt;/code> pod logs:&lt;/p>
&lt;pre tabindex="0">&lt;code>http: TLS handshake error from 10.48.3.125:33374: remote error: tls: bad certificate
&lt;/code>&lt;/pre>&lt;p>Then there could be an issue with your &lt;code>./rootCA.pem&lt;/code>.&lt;/p>
&lt;p>You can repeat the process from step 2, in order to fix your certificates setup.&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>Read the advanced &lt;a href="http://localhost:1313/docs/advanced/scheduling-and-autoscaling/">Scheduling and Autoscaling&lt;/a> guide, for more details on autoscaling.&lt;/p>
&lt;p>If you want to use your own GameServer container make sure you have properly integrated the &lt;a href="http://localhost:1313/docs/guides/client-sdks/">Code Blind SDK&lt;/a>.&lt;/p></description></item><item><title>Docs: Quickstart: Edit a Game Server</title><link>http://localhost:1313/docs/getting-started/edit-first-gameserver-go/</link><pubDate>Wed, 02 Jan 2019 06:42:56 +0000</pubDate><guid>http://localhost:1313/docs/getting-started/edit-first-gameserver-go/</guid><description>
&lt;p>This guide addresses Google Kubernetes Engine and Minikube. We would welcome a Pull Request to expand this to include other platforms as well.&lt;/p>
&lt;h2 id="prerequisites">Prerequisites&lt;/h2>
&lt;ol>
&lt;li>A &lt;a href="https://golang.org/dl/">Go&lt;/a> environment&lt;/li>
&lt;li>&lt;a href="https://www.docker.com/get-started/">Docker&lt;/a>&lt;/li>
&lt;li>Code Blind installed on GKE or Minikube&lt;/li>
&lt;li>kubectl properly configured&lt;/li>
&lt;/ol>
&lt;p>To install on GKE, follow the install instructions (if you haven&amp;rsquo;t already) at
&lt;a href="http://localhost:1313/docs/installation/creating-cluster/gke/">Setting up a Google Kubernetes Engine (GKE) cluster&lt;/a>.
Also complete the &amp;ldquo;Enabling creation of RBAC resources&amp;rdquo; and &amp;ldquo;Installing Code Blind&amp;rdquo; sets of instructions on the same page.&lt;/p>
&lt;p>To install locally on Minikube, read &lt;a href="http://localhost:1313/docs/installation/creating-cluster/minikube/">Setting up a Minikube cluster&lt;/a>.
Also complete the &amp;ldquo;Enabling creation of RBAC resources&amp;rdquo; and &amp;ldquo;Installing Code Blind&amp;rdquo; sets of instructions on the same page.&lt;/p>
&lt;h2 id="modify-the-code-and-push-another-new-image">Modify the code and push another new image&lt;/h2>
&lt;h3 id="modify-the-simple-game-server-example-source-code">Modify the simple-game-server example source code&lt;/h3>
&lt;p>Modify the
&lt;a href="https://github.com/josephbarnett/codeblind.ai/blob/release-1.38.0/" target="_blank" data-proofer-ignore>main.go&lt;/a> file. For example:&lt;/p>
&lt;p>Change the following line in &lt;code>main.go&lt;/code>:&lt;/p>
&lt;p>From:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">respond&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sender&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ACK: &amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">txt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>To:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-go" data-lang="go">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">respond&lt;/span>&lt;span style="color:#000;font-weight:bold">(&lt;/span>&lt;span style="color:#000">conn&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#000">sender&lt;/span>&lt;span style="color:#000;font-weight:bold">,&lt;/span> &lt;span style="color:#4e9a06">&amp;#34;ACK: Echo says &amp;#34;&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#000">txt&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">+&lt;/span>&lt;span style="color:#4e9a06">&amp;#34;\n&amp;#34;&lt;/span>&lt;span style="color:#000;font-weight:bold">)&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="build-server">Build Server&lt;/h3>
&lt;p>Since Docker image is using Alpine Linux, the &amp;ldquo;go build&amp;rdquo; command has to include few more environment variables.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>go get agones.dev/agones/pkg/sdk
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#000">GOOS&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>linux &lt;span style="color:#000">GOARCH&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>amd64 &lt;span style="color:#000">CGO_ENABLED&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#0000cf;font-weight:bold">0&lt;/span> go build -o bin/server -a -v main.go
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="using-docker-file">Using Docker File&lt;/h2>
&lt;h3 id="create-a-new-docker-image">Create a new docker image&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker build -t gcr.io/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PROJECT_ID&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>/agones-simple-game-server:modified .
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: you can change the image name &amp;ldquo;agones-simple-game-server&amp;rdquo; to something else.&lt;/p>
&lt;h3 id="if-using-gke-push-the-image-to-gcp-registry">If using GKE, push the image to GCP Registry&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>docker push gcr.io/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PROJECT_ID&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>/agones-simple-game-server:modified
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Note: Review &lt;a href="https://cloud.google.com/container-registry/docs/advanced-authentication">Authentication Methods&lt;/a>
for additional information regarding use of gcloud as a Docker credential helper
and advanced authentication methods to the Google Container Registry.&lt;/p>
&lt;h3 id="if-using-minikube-load-the-image-into-minikube">If using Minikube, load the image into Minikube&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>minikube cache add gcr.io/&lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>PROJECT_ID&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>/agones-agones-simple-game-server:modified
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="modify-gameserveryaml">Modify gameserver.yaml&lt;/h3>
&lt;p>Modify the following line from gameserver.yaml to use the new configuration.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-yaml" data-lang="yaml">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#204a87;font-weight:bold">spec&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">containers&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>- &lt;span style="color:#204a87;font-weight:bold">name&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">agones-simple-game-server&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#204a87;font-weight:bold">image&lt;/span>&lt;span style="color:#000;font-weight:bold">:&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline"> &lt;/span>&lt;span style="color:#000">gcr.io/[PROJECT_ID]/agones-simple-game-server:modified&lt;/span>&lt;span style="color:#f8f8f8;text-decoration:underline">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="if-using-gke-deploy-server-to-gke">If using GKE, deploy Server to GKE&lt;/h3>
&lt;p>Apply the latest settings to the Kubernetes container.&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>gcloud config &lt;span style="color:#204a87">set&lt;/span> container/cluster &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>CLUSTER_NAME&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>gcloud container clusters get-credentials &lt;span style="color:#ce5c00;font-weight:bold">[&lt;/span>CLUSTER_NAME&lt;span style="color:#ce5c00;font-weight:bold">]&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>kubectl apply -f gameserver.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="if-using-minikube-deploy-the-server-to-minikube">If using Minikube, deploy the Server to Minikube&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl apply -f gameserver.yaml
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="check-the-gameserver-status">Check the GameServer Status&lt;/h3>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl describe gameserver
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h3 id="verify">Verify&lt;/h3>
&lt;p>Let&amp;rsquo;s retrieve the IP address and the allocated port of your Game Server:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-bash" data-lang="bash">&lt;span style="display:flex;">&lt;span>kubectl get gs simple-game-server -o &lt;span style="color:#000">jsonpath&lt;/span>&lt;span style="color:#ce5c00;font-weight:bold">=&lt;/span>&lt;span style="color:#4e9a06">&amp;#39;{.status.address}:{.status.ports[0].port}&amp;#39;&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You can now communicate with the Game Server :&lt;/p>
&lt;div class="alert alert-info" role="alert">
&lt;h4 class="alert-heading">Note&lt;/h4>
If you do not have netcat installed
(i.e. you get a response of &lt;code>nc: command not found&lt;/code>),
you can install netcat by running &lt;code>sudo apt install netcat&lt;/code>.
&lt;/div>
&lt;pre tabindex="0">&lt;code>nc -u {IP} {PORT}
Hello World!
ACK: Echo says Hello World!
EXIT
&lt;/code>&lt;/pre>&lt;p>You can finally type &lt;code>EXIT&lt;/code> which tells the SDK to run the &lt;a href="http://localhost:1313/docs/guides/client-sdks/#shutdown">Shutdown command&lt;/a>, and therefore shuts down the &lt;code>GameServer&lt;/code>.&lt;/p>
&lt;p>If you run &lt;code>kubectl describe gameserver&lt;/code> again - either the GameServer will be gone completely, or it will be in &lt;code>Shutdown&lt;/code> state, on the way to being deleted.&lt;/p>
&lt;h2 id="next-steps">Next Steps&lt;/h2>
&lt;p>If you want to perform rolling updates of modified game servers, see &lt;a href="http://localhost:1313/docs/getting-started/create-fleet/">Quickstart Create a Game Server Fleet&lt;/a>.&lt;/p></description></item></channel></rss>